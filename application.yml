AWSTemplateFormatVersion: 2010-09-09

Description: > 
  AWS CloudFormation which creates a load balanced, scalable sample website 
  using Application Load Balancer attached to an Auto Scaling group.

Parameters:
  EnvironmentName:
    Description: An environment name that should match the name used to create the network.
    Type: String

  AppInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    AllowedValues:
      - t2.medium 
      - t2.large
      - t2.xlarge 
    Default: t2.medium
    ConstraintDescription: Must be a valid EC2 instance type greater than 4GB RAM.
  
  EC2KeyName:
    Description: Name of an EC2 KeyPair. Your bastion instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
    
Mappings:
  RegionMap:
    eu-central-1:
      AMI: ami-0b418580298265d5c
    us-west-2:
      AMI: ami-0d1cd67c26f5fca19
    
Resources:
  LoadBalancerSecurityGroup: 
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Load balancer security group"
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"      
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80

  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Application security group"
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID" 
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          FromPort: 80
          ToPort: 80

        - IpProtocol: tcp
          SourceSecurityGroupId: 
            Fn::ImportValue: !Sub "${EnvironmentName}-BastionSecurityGroupID"
          FromPort: 22
          ToPort: 22  

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup  

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: 
      - AppLoadBalancer
    Properties:
      TargetType: instance 
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID" 
      Protocol: HTTP 
      Port: 80
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP 
 
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  ProfileWithRolesForApp: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref UdacityS3ReadOnlyEC2
  
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} App
          PropagateAtLaunch: true
      VPCZoneIdentifier: 
         - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN" 
         - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN" 
      LaunchConfigurationName:
        !Ref LaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref AppTargetGroup
      
  AppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: 1

  AppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions:
        - !Ref AppScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AppAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions:
        - !Ref AppScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AppAutoScalingGroup
      ComparisonOperator: LessThanThreshold
  
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      InstanceType: !Ref AppInstanceType
      KeyName: !Ref EC2KeyName
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeSize: 10
            VolumeType: gp2
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      SecurityGroups:
        - !Ref AppSecurityGroup
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
             
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join ["", ["http://", !GetAtt [AppLoadBalancer, DNSName]]]

